* How did viewing a diff between two versions of a file help you see the bug that was introduced?
- By compairing last worked version with the current containing the bug we can see where we made mistake.

* How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
- If we made bad updates with errors and bugs we can easy return to the last worked state.
  Also we can easy add and cancel features by switching versions.

* What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?
- pros
  you can logicaly separate commits, so it will be easy to find and use a commit you need
  cons
  you can loose some data, that you didn't commit in time

* Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
- Because in Git we save files manually.

* How can you use the commands git log and git diff to view the history of files?
- Using git log we can see the list of last commits.
  Using git diff we can compare any two commits and see changes were made.

* How might using version control make you more confident to make changes that could break something?
- Because I can return to the last worked version using git checkout in any time.

* Now that you have your workspace set up, what do you want to try using Git for?
- Check out how diff result will look like.

* What are some situations when branches would be helpful in keeping your history organized? How would branches help?
- For example, when you want to make some changes, but you don't want to be them in master branch.
  In cases when you want to test something, or make new version etc.